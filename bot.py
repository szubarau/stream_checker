import os
import logging
from datetime import datetime
from telegram import Bot, InputMediaPhoto
from telegram.constants import ParseMode
from api import get_stream_status
from stream_status import StreamStatusManager

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(message)s',
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)


class NotificationSender:
    def __init__(self):
        self.bot = Bot(token=os.getenv("TELEGRAM_BOT_TOKEN"))
        self.chat_id = os.getenv("TELEGRAM_CHANNEL")

    def _prepare_message(self, streamer, stream_data):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫—Ä–∞—Å–∏–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        game = stream_data.get('game_name', '–ò–≥—Ä–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞')
        title = stream_data.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        viewers = stream_data.get('viewer_count', 0)

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞
        try:
            start_time = datetime.strptime(stream_data['started_at'], '%Y-%m-%dT%H:%M:%SZ')
            time_str = start_time.strftime('%H:%M UTC')
        except (KeyError, ValueError):
            time_str = '–≤—Ä–µ–º—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'

        return (
            f"üéÆ <b>{streamer} –Ω–∞—á–∞–ª —Å—Ç—Ä–∏–º!</b>\n\n"
            f"üïπÔ∏è –ò–≥—Ä–∞: <b>{game}</b>\n"
            f"üì∫ –ù–∞–∑–≤–∞–Ω–∏–µ: <i>{title}</i>\n"
            f"üëÄ –ó—Ä–∏—Ç–µ–ª–µ–π: <b>{viewers:,}</b>\n"
            f"‚è± –ù–∞—á–∞–ª–æ: <b>{time_str}</b>\n\n"
            f"üî¥ <a href='https://twitch.tv/{streamer}'>–°–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ Twitch</a>"
        )

    def _prepare_thumbnail(self, thumbnail_url):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ URL –ø—Ä–µ–≤—å—é"""
        if not thumbnail_url:
            return None
        return thumbnail_url.replace('{width}', '1280').replace('{height}', '720')

    def send(self, streamer, stream_data):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        try:
            message = self._prepare_message(streamer, stream_data)
            thumbnail = self._prepare_thumbnail(stream_data.get('thumbnail_url'))

            if thumbnail:
                self.bot.send_photo(
                    chat_id=self.chat_id,
                    photo=thumbnail,
                    caption=message,
                    parse_mode=ParseMode.HTML
                )
            else:
                self.bot.send_message(
                    chat_id=self.chat_id,
                    text=message,
                    parse_mode=ParseMode.HTML,
                    disable_web_page_preview=False
                )

            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è {streamer} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            return True

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {str(e)}", exc_info=True)
            return False


def main():
    logger.info("=== –°—Ç–∞—Ä—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ ===")

    streamer = "zumich"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω–æ–≥–æ —Å—Ç—Ä–∏–º–µ—Ä–∞
    notifier = NotificationSender()
    status_manager = StreamStatusManager()

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã
        last_status = status_manager.get_last_status()
        current_stream = get_stream_status(streamer)
        current_status = bool(current_stream)

        logger.info(
            f"–°—Ç–∞—Ç—É—Å {streamer}: –±—ã–ª {'online' if last_status else 'offline'}, —Å–µ–π—á–∞—Å {'online' if current_status else 'offline'}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–∏–º–∞
        if current_status and not last_status:
            notifier.send(streamer, current_stream)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å
        status_manager.save_status(current_status)

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}", exc_info=True)
        raise

    logger.info("=== –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω ===")


if __name__ == "__main__":
    main()